1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2^n):

An 0(1) algorithm is the Japanese bullet train, and an O(2^n) algorithm is my 2000 Honda Odyssey.

----------------------------------------

2. In plain English, what is the best case scenario for binary search?

Best case would be O(1); same as a linear search's best case scenario.

----------------------------------------

3. In plain English, what is the worst-case scenario for binary search?

Worst case is O(log n); where the program needs to search the full breadth/depth of the tree before finding its value. 

----------------------------------------

4. In plain English, what is the bounded-case scenario for binary search?

Hmmm, this question is tricky. I think because we're talking about a binary tree, there could only be 2 possibilities: best case and worst case. Therefore, I'd say that the bounded case is the same as the worst case -- O(log n). 

----------------------------------------

5. Create a graph using the data below.

(See "5.Graph.png").

----------------------------------------

6. What's the asymptotic limit as n approaches infinity for the function defined by the values above?

lim n —> ∞ f(n) = 2^n

There is no limit because there is no value at which the algorithm won't cross. 

----------------------------------------

7. What is the Big-O of an algorithm that has the data points above?

O(2^n). I'm a little confused: isn't this question the same as the previous one? I feel like I answered the same question twice. Am I missing something?

----------------------------------------

8. Write a Ruby script that calculates and prints the N number, given an iteration, for linear search in the worst case:

def linear_worst_case(iterations)
    n = iterations
    puts n
end

----------------------------------------

9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

(See "9.Graph.png").

----------------------------------------

10. What is the Big-O of binary search?

O(log n).

----------------------------------------

11. What is the Big-Ω of binary search?

O(1).

----------------------------------------

12. What is the Big-Ө of binary search?

0.5 * O(n). 